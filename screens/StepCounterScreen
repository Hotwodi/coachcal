import React, { useState, useEffect } from 'react';
import { StyleSheet, View, Text, TouchableOpacity, Animated } from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { Pedometer } from 'expo-sensors';
import AsyncStorage from '@react-native-async-storage/async-storage';

export default function StepCounterScreen({ navigation }) {
  const [isPedometerAvailable, setIsPedometerAvailable] = useState('checking');
  const [steps, setSteps] = useState(0);
  const [calories, setCalories] = useState(0);
  const [isTracking, setIsTracking] = useState(false);
  const [subscription, setSubscription] = useState(null);
  const [dailyGoal] = useState(10000); // Default goal
  const [progressAnimation] = useState(new Animated.Value(0));
  
  // Check if pedometer is available
  useEffect(() => {
    const checkPedometerAvailability = async () => {
      const isAvailable = await Pedometer.isAvailableAsync();
      setIsPedometerAvailable(String(isAvailable));
      
      // Load saved steps if available
      if (isAvailable) {
        loadSavedSteps();
      }
    };
    
    checkPedometerAvailability();
  }, []);

  // Load steps from AsyncStorage
  const loadSavedSteps = async () => {
    try {
      const today = new Date().toISOString().split('T')[0];
      const savedData = await AsyncStorage.getItem(`steps_${today}`);
      
      if (savedData) {
        const data = JSON.parse(savedData);
        setSteps(data.count || 0);
        setCalories(data.count * 0.04); // 0.04 calories per step
        updateProgressBar(data.count);
      }
    } catch (error) {
      console.error("Error loading steps:", error);
    }
  };

  // Save steps to AsyncStorage
  const saveSteps = async () => {
    try {
      const today = new Date().toISOString().split('T')[0];
      const data = {
        date: today,
        count: steps,
        calories: calories,
        timestamp: new Date().toISOString()
      };
      
      await AsyncStorage.setItem(`steps_${today}`, JSON.stringify(data));
    } catch (error) {
      console.error("Error saving steps:", error);
    }
  };

  // Start tracking steps
  const startTracking = () => {
    if (isPedometerAvailable === 'true') {
      setIsTracking(true);
      const subscription = Pedometer.watchStepCount(result => {
        const newSteps = steps + result.steps;
        setSteps(newSteps);
        setCalories(newSteps * 0.04);
        updateProgressBar(newSteps);
        saveSteps();
      });
      setSubscription(subscription);
    }
  };

  // Stop tracking steps
  const stopTracking = () => {
    setIsTracking(false);
    subscription && subscription.remove();
    setSubscription(null);
    saveSteps();
  };

  // Reset steps
  const resetSteps = () => {
    setSteps(0);
    setCalories(0);
    updateProgressBar(0);
    saveSteps();
  };

  // Update progress bar animation
  const updateProgressBar = (currentSteps) => {
    const progress = Math.min(currentSteps / dailyGoal, 1);
    Animated.timing(progressAnimation, {
      toValue: progress,
      duration: 300,
      useNativeDriver: false
    }).start();
  };

  // Calculate progress width based on animation value
  const progressWidth = progressAnimation.interpolate({
    inputRange: [0, 1],
    outputRange: ['0%', '100%']
  });

  return (
    <View style={styles.container}>
      <View style={styles.counterContainer}>
        <Text style={styles.title}>Step Counter</Text>
        <Text style={styles.count}>{steps}</Text>
        <Text style={styles.subtitle}>steps today</Text>
        
        <View style={styles.caloriesContainer}>
          <Ionicons name="flame" size={24} color="#FF6B6B" />
          <Text style={styles.calories}>{calories.toFixed(1)} calories burned</Text>
        </View>
        
        <View style={styles.progressContainer}>
          <Text style={styles.goalText}>Daily Goal: {dailyGoal} steps</Text>
          <View style={styles.progressBar}>
            <Animated.View 
              style={[
                styles.progressFill, 
                { width: progressWidth, 
                  backgroundColor: steps >= dailyGoal ? '#4CAF50' : '#2196F3' 
                }
              ]} 
            />
          </View>
          <Text style={styles.progressText}>
            {Math.round((steps / dailyGoal) * 100)}% complete
          </Text>
        </View>
      </View>
      
      <View style={styles.buttonsContainer}>
        {!isTracking ? (
          <TouchableOpacity 
            style={[styles.button, styles.startButton]} 
            onPress={startTracking}
          >
            <Ionicons name="play" size={24} color="white" />
            <Text style={styles.buttonText}>Start Tracking</Text>
          </TouchableOpacity>
        ) : (
          <TouchableOpacity 
            style={[styles.button, styles.pauseButton]} 
            onPress={stopTracking}
          >
            <Ionicons name="pause" size={24} color="white" />
            <Text style={styles.buttonText}>Pause Tracking</Text>
          </TouchableOpacity>
        )}
        
        <TouchableOpacity 
          style={[styles.button, styles.resetButton]} 
          onPress={resetSteps}
        >
          <Ionicons name="refresh" size={24} color="white" />
          <Text style={styles.buttonText}>Reset</Text>
        </TouchableOpacity>
      </View>
      
      {isPedometerAvailable !== 'true' && (
        <View style={styles.errorContainer}>
          <Text style={styles.errorText}>
            Pedometer is not available on this device.
          </Text>
        </View>
      )}
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    padding: 20,
  },
  counterContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 20,
  },
  count: {
    fontSize: 64,
    fontWeight: 'bold',
    color: '#2196F3',
  },
  subtitle: {
    fontSize: 18,
    color: '#757575',
    marginBottom: 20,
  },
  caloriesContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 30,
  },
  calories: {
    fontSize: 18,
    marginLeft: 8,
    color: '#FF6B6B',
  },
  progressContainer: {
    width: '100%',
    marginTop: 20,
  },
  goalText: {
    fontSize: 16,
    marginBottom: 8,
  },
  progressBar: {
    height: 20,
    width: '100%',
    backgroundColor: '#E0E0E0',
    borderRadius: 10,
    overflow: 'hidden',
  },
  progressFill: {
    height: '100%',
    borderRadius: 10,
  },
  progressText: {
    fontSize: 14,
    marginTop: 8,
    textAlign: 'right',
  },
  buttonsContainer: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    marginBottom: 30,
  },
  button: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 12,
    paddingHorizontal: 20,
    borderRadius: 8,
    elevation: 3,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.25,
    shadowRadius: 3.84,
  },
  startButton: {
    backgroundColor: '#4CAF50',
    flex: 2,
    marginRight: 10,
  },
  pauseButton: {
    backgroundColor: '#FFA000',
    flex: 2,
    marginRight: 10,
  },
  resetButton: {
    backgroundColor: '#F44336',
    flex: 1,
  },
  buttonText: {
    color: 'white',
    fontWeight: 'bold',
    fontSize: 16,
    marginLeft: 8,
  },
  errorContainer: {
    padding: 15,
    backgroundColor: '#ffebee',
    borderRadius: 8,
    marginBottom: 20,
  },
  errorText: {
    color: '#c62828',
    textAlign: 'center',
  },
});